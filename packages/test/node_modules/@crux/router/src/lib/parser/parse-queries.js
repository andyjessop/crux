"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseQueries = void 0;
const is_list_1 = require("./is-list");
const is_optional_1 = require("./is-optional");
const param_name_1 = require("./param-name");
const parse_segment_1 = require("./parse-segment");
/**
 * Parse a query, returning a decodeURL function.
 */
function parseQueries(target) {
    const keys = Array.from(target.keys());
    const parsers = keys.map((key) => {
        const segment = target.get(key);
        if (!segment) {
            return null;
        }
        return (0, parse_segment_1.parseSegment)(segment);
    }).filter(parser => parser !== null);
    return function curriedParseQueries(query, params) {
        var _a;
        const queryKeys = Array.from(query.keys());
        if (!keys.every((x) => (0, is_optional_1.isOptional)(x) || (0, is_list_1.isList)(x) || queryKeys.includes(x))) {
            return false;
        }
        for (let i = 0; i < keys.length; i++) {
            const key = (0, param_name_1.paramName)(keys[i]);
            const q = query.get(key);
            if (!q) {
                return false;
            }
            if ((0, is_list_1.isList)(keys[i])) {
                Array.from(query.entries())
                    .filter((x) => x[0] === key)
                    .forEach((x) => { var _a; return (_a = parsers[i]) === null || _a === void 0 ? void 0 : _a.call(parsers, x[1], params, true); });
            }
            else if (!((_a = parsers[i]) === null || _a === void 0 ? void 0 : _a.call(parsers, q, params)) && !(0, is_optional_1.isOptional)(keys[i])) {
                return false;
            }
        }
        return true;
    };
}
exports.parseQueries = parseQueries;
//# sourceMappingURL=parse-queries.js.map