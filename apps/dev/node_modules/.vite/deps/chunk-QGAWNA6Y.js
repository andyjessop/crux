import {
  R,
  b,
  e,
  i,
  o2,
  t,
  w
} from "./chunk-PHIVQFFV.js";

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.R5Z37LZL.js
var { H: i2 } = R;
var r = (o) => void 0 === o.strings;
var f = {};
var s = (o, i3 = f) => o._$AH = i3;
var l = e(class extends i {
  constructor(r2) {
    if (super(r2), r2.type !== t.PROPERTY && r2.type !== t.ATTRIBUTE && r2.type !== t.BOOLEAN_ATTRIBUTE)
      throw Error("The `live` directive is not allowed on child or event bindings");
    if (!r(r2))
      throw Error("`live` bindings can only contain a single expression");
  }
  render(r2) {
    return r2;
  }
  update(i3, [t2]) {
    if (t2 === b || t2 === w)
      return t2;
    const o = i3.element, l2 = i3.name;
    if (i3.type === t.PROPERTY) {
      if (t2 === o[l2])
        return b;
    } else if (i3.type === t.BOOLEAN_ATTRIBUTE) {
      if (!!t2 === o.hasAttribute(l2))
        return b;
    } else if (i3.type === t.ATTRIBUTE && o.getAttribute(l2) === t2 + "")
      return b;
    return s(i3), t2;
  }
});

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.XM2NSF2I.js
var defaultValue = (propertyName = "value") => (proto, key) => {
  const ctor = proto.constructor;
  const attributeChangedCallback = ctor.prototype.attributeChangedCallback;
  ctor.prototype.attributeChangedCallback = function(name, old, value) {
    var _a;
    const options = ctor.getPropertyOptions(propertyName);
    const attributeName = typeof options.attribute === "string" ? options.attribute : propertyName;
    if (name === attributeName) {
      const converter = options.converter || o2;
      const fromAttribute = typeof converter === "function" ? converter : (_a = converter == null ? void 0 : converter.fromAttribute) != null ? _a : o2.fromAttribute;
      const newValue = fromAttribute(value, options.type);
      if (this[propertyName] !== newValue) {
        this[key] = newValue;
      }
    }
    attributeChangedCallback.call(this, name, old, value);
  };
};

export {
  l,
  defaultValue
};
/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
//# sourceMappingURL=chunk-QGAWNA6Y.js.map
