{
  "version": 3,
  "sources": ["../../../../../node_modules/lit-html/src/directives/unsafe-html.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing, TemplateResult, noChange} from '../lit-html.js';\nimport {directive, Directive, PartInfo, PartType} from '../directive.js';\n\nconst HTML_RESULT = 1;\n\nexport class UnsafeHTMLDirective extends Directive {\n  static directiveName = 'unsafeHTML';\n  static resultType = HTML_RESULT;\n\n  private _value: unknown = nothing;\n  private _templateResult?: TemplateResult;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTMLDirective).directiveName\n        }() can only be used in child bindings`\n      );\n    }\n  }\n\n  render(value: string | typeof nothing | typeof noChange | undefined | null) {\n    if (value === nothing || value == null) {\n      this._templateResult = undefined;\n      return (this._value = value);\n    }\n    if (value === noChange) {\n      return value;\n    }\n    if (typeof value != 'string') {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTMLDirective).directiveName\n        }() called with a non-string value`\n      );\n    }\n    if (value === this._value) {\n      return this._templateResult;\n    }\n    this._value = value;\n    const strings = [value] as unknown as TemplateStringsArray;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (strings as any).raw = strings;\n    // WARNING: impersonating a TemplateResult like this is extremely\n    // dangerous. Third-party directives should not do this.\n    return (this._templateResult = {\n      // Cast to a known set of integers that satisfy ResultType so that we\n      // don't have to export ResultType and possibly encourage this pattern.\n      // This property needs to remain unminified.\n      ['_$litType$']: (this.constructor as typeof UnsafeHTMLDirective)\n        .resultType as 1 | 2,\n      strings,\n      values: [],\n    });\n  }\n}\n\n/**\n * Renders the result as HTML, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive(UnsafeHTMLDirective);\n"],
  "mappings": ";;;;;;;;;;;AASA,IAAM,cAAc;AAEd,IAAO,sBAAP,cAAmC,UAAS;EAOhD,YAAY,UAAkB;AAC5B,UAAM,QAAQ;AAJR,SAAA,SAAkB;AAKxB,QAAI,SAAS,SAAS,SAAS,OAAO;AACpC,YAAM,IAAI,MACR,GACG,KAAK,YAA2C,oDACZ;;EAG7C;EAEA,OAAO,OAAmE;AACxE,QAAI,UAAU,WAAW,SAAS,MAAM;AACtC,WAAK,kBAAkB;AACvB,aAAQ,KAAK,SAAS;;AAExB,QAAI,UAAU,UAAU;AACtB,aAAO;;AAET,QAAI,OAAO,SAAS,UAAU;AAC5B,YAAM,IAAI,MACR,GACG,KAAK,YAA2C,gDAChB;;AAGvC,QAAI,UAAU,KAAK,QAAQ;AACzB,aAAO,KAAK;;AAEd,SAAK,SAAS;AACd,UAAM,UAAU,CAAC,KAAK;AAErB,YAAgB,MAAM;AAGvB,WAAQ,KAAK,kBAAkB;MAI7B,CAAC,eAAgB,KAAK,YACnB;MACH;MACA,QAAQ,CAAA;;EAEZ;;AAlDO,oBAAA,gBAAgB;AAChB,oBAAA,aAAa;AA8Df,IAAM,aAAa,UAAU,mBAAmB;",
  "names": []
}
